"use strict";angular.module("ng360",[]).factory("r360Angular",[function($scope,$q,$location,$timeout,$http,$routeParams){function getColorRangeArray(){return prefs.colorRanges[self.colorRange]}function normalizeLatLng(coords){var result={lat:void 0,lng:void 0};return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(result.lat=parseFloat(coords.lat.toFixed(6)),result.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(result.lat=parseFloat(coords[0].toFixed(6)),result.lng=parseFloat(coords[1].toFixed(6))),coords}function geocode(query,coords){var results=[],deferred=$q.defer();return $http({method:"GET",url:"https://service.route360.net/geocode/api/?q="+query+"&lat="+coords.lat+"&lon="+coords.lng+"&limit=5"}).then(function(response){results=response.data.features.map(function(result){return result.value=result.properties.osm_id,result.description=buildPlaceDescription(result.properties),console.log(result.description),result}),deferred.resolve(results)},function(response){console.log(response)}),deferred.promise}function reverseGeocode(coords){var url="",deferred=$q.defer();return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(url="https://service.route360.net/geocode/reverse?lon="+coords.lng+"&lat="+coords.lat),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(url="https://service.route360.net/geocode/reverse?lon="+coords[1]+"&lat="+coords[0]),$http({method:"GET",url:url}).then(function(response){var properties={};response.data.features.length>0?(properties=response.data.features[0].properties,"undefined"==typeof properties.name&&(properties.name="","undefined"!=typeof properties.street&&(properties.name+=properties.street),"undefined"!=typeof properties.housenumber&&(properties.name+=" "+properties.housenumber))):properties={name:"Marker",city:"",country:""},deferred.resolve(properties)},function(response){console.log(response)}),deferred.promise}function getTravelOptions(){var travelOptions=r360.travelOptions(),travelTime=60*self.travelTime,travelTimes=[],defaultColors=[];if(prefs.travelTimeRanges[self.travelTimeRange].times.forEach(function(elem,index,array){var dataSet={};dataSet.time=60*elem,dataSet.color=prefs.colorRanges[self.colorRange].colors[index],dataSet.opacity=prefs.colorRanges[self.colorRange].opacities[index],defaultColors.push(dataSet)}),r360.config.defaultTravelTimeControlOptions.travelTimes=defaultColors,"inverse"==self.colorRange?travelTimes.push(travelTime):defaultColors.forEach(function(elem,index,array){elem.time<=travelTime&&travelTimes.push(elem.time)}),travelOptions.setTravelTimes(travelTimes),travelOptions.setTravelType(self.travelType),self.markers.forEach(function(marker){marker.polygons&&"source"==marker.route&&travelOptions.addSource(marker),"target"==marker.route&&travelOptions.addTarget(marker)}),travelOptions.extendWidthX=2*self.extendWidth,travelOptions.extendWidthY=2*self.extendWidth,travelOptions.setIntersectionMode(self.intersection),"transit"==self.travelType){var date=String(self.queryDate.getFullYear())+("0"+String(self.queryDate.getMonth())).slice(-2)+("0"+String(self.queryDate.getDate())).slice(-2);travelOptions.setDate(date);var rawTime=self.queryTime,time=3600*rawTime.h+60*rawTime.m;travelOptions.setTime(time)}return travelOptions.setMinPolygonHoleSize(3600*self.travelTime*2e3),travelOptions}function getPolygons(success,error){if(angular.isDefined(layerGroups)){0===self.sourceMarkers.length&&(layerGroups.polygonLayerGroup.clearLayers(),angular.isDefined(success)&&success("normarkers")),"inverse"==self.colorRange?layerGroups.polygonLayerGroup.setInverse(!0):layerGroups.polygonLayerGroup.setInverse(!1);var travelOptions=getTravelOptions();return travelOptions.getSources().length<1?void(angular.isDefined(success)&&success("normarkers")):void $timeout(function(){r360.PolygonService.getTravelTimePolygons(travelOptions,function(polygons){$scope.$apply(function(){layerGroups.polygonLayerGroup.clearAndAddLayers(polygons,!1)}),angular.isDefined(success)&&success()},function(status,message){angular.isDefined(error)&&error(status,message)},"GET")})}}function getRoutes(success,error){if(angular.isDefined(layerGroups)){if(layerGroups.routeLayerGroup.clearLayers(),0===self.targetMarkers.length||0===self.sourceMarkers.length)return void(angular.isDefined(success)&&success("normarkers"));var travelOptions=getTravelOptions();$timeout(function(){r360.RouteService.getRoutes(travelOptions,function(routes){routes.forEach(function(elem,index,array){r360.LeafletUtil.fadeIn(layerGroups.routeLayerGroup,elem,500,"travelDistance",{color:"red",haloColor:"#fff"})}),$scope.$$phase||$scope.$apply(),angular.isDefined(success)&&success("normarkers")},function(status,message){angular.isDefined(error)&&error(status,message)})})}}function parseGetParams(){for(var index in $routeParams){var value=$routeParams[index];switch(index){case"cityID":case"travelTime":case"travelTimeRange":case"colorRange":case"mapProvider":case"maxSourceMarkers":case"maxTargetMarkers":self[index]=parseInt(value);break;case"areaID":case"travelType":case"intersection":self[index]=value;break;case"sources":case"targets":break;default:console.log("Parameter not valid")}}if(angular.isDefined(self.cityID)&&"number"==typeof self.cityID)switch(self.cityID){case 0:self.areaID="berlin";break;case 1:self.areaID="norway";break;case 2:self.areaID="france";break;case 3:self.areaID="canada";break;case 4:self.areaID="denmark";break;case 5:self.areaID="britishisles";break;case 6:self.areaID="switzerland";break;case 7:self.areaID="austria";break;case 8:self.areaID="newyork"}}function updateURL(){for(var index in self.options)switch(index){case"markers":if(0===self.sourceMarkers.length){$location.search("sources",null);break}var sources=[];self.sourceMarkers.forEach(function(elem,index,array){sources.push(elem._latlng.lat+","+elem._latlng.lng)}),$location.search("sources",sources.join(";"));break;case"areaID":case"travelTime":case"travelTimeRange":case"travelType":case"colorRange":case"intersection":if(angular.isDefined($routeParams[index])&&$routeParams[index]==self[index])break;$location.search(index,String(self[index]))}}function addMarker(coords,polygons,markerIcon,route){if(angular.isDefined(markerIcon)||(markerIcon=L.AwesomeMarkers.icon({icon:"fa-circle",prefix:"fa",markerColor:"red"})),angular.isDefined(route)||(route="source"),angular.isDefined(polygons)||(polygons="true"),"undefined"==typeof coords[0]&&"undefined"==typeof coords[1]||"undefined"==typeof coords.lat&&"undefined"==typeof coords.lng){"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(coords.lat=parseFloat(coords.lat.toFixed(6)),coords.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(coords[0]=parseFloat(coords[0].toFixed(6)),coords[1]=parseFloat(coords[1].toFixed(6)));var newMarker=(layerGroups.markerLayerGroup,L.marker(coords,{icon:markerIcon,contextmenu:!0,draggable:!0,contextmenuItems:[{text:"Delete Marker",callback:removeMarkerFromContext,index:3,iconFa:"fa-fw fa-times"},{separator:!0,index:2}]}));return newMarker.polygons=polygons,newMarker.route=route,newMarker.addTo(layerGroups.markerLayerGroup),self.markers.push(newMarker),newMarker}}function removeMarker(marker){layerGroups.markerLayerGroup.removeLayer(marker),self.markers.forEach(function(elem,index,array){elem==marker&&array.splice(index,1)}),getPolygons()}function removeMarkerFromContext(e){removeMarker(lastRelatedTarget)}function buildPlaceDescription(rawResult){var name,adress1,adress2,result={title:"",meta1:"",meta2:"",full:""};return angular.isDefined(rawResult.name)&&(name=rawResult.name),angular.isDefined(rawResult.street)&&(adress1=rawResult.street,angular.isDefined(rawResult.housenumber)&&(adress1+=" "+rawResult.housenumber)),angular.isDefined(rawResult.city)?(adress2=rawResult.city,angular.isDefined(rawResult.postcode)&&(adress2=rawResult.postcode+" "+adress2),angular.isDefined(rawResult.country)&&(adress2+=", "+rawResult.country)):angular.isDefined(rawResult.country)&&(adress2=rawResult.country),angular.isDefined(name)?(result.title=name,result.meta1=adress1,result.meta2=adress2):(result.title=adress1,result.meta1=adress2),name!==adress1&&(result.full=result.title),""!==result.meta1&&angular.isDefined(result.meta1)&&name!==adress1&&(result.full+=", "+result.meta1),""!==result.meta1&&angular.isDefined(result.meta1)&&name==adress1&&(result.full+=result.meta1),""!==result.meta2&&angular.isDefined(result.meta2)&&(result.full+=", "+result.meta2),result}var now=new Date,hour=now.getHours(),minute=(now.getMinutes()+(5-now.getMinutes()%5))%60;0===minute&&hour++,24===hour&&(hour=0);var self={serviceKey:"6RNT8QMSOBQN0KMFXIPD",areaID:"germany",travelTime:30,travelTimeRange:"5to30",travelType:"transit",queryTime:{h:hour,m:minute},queryDate:now,colorRange:"default",markers:[],intersection:"union",strokeWidth:20,extendWidth:500,mapstyle:"https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",showSourceMarkers:!0,showTargetMarkers:!1,showSourceIsochrones:!1,showTargetIsochrones:!1,singleMarkerMode:!0,maxSourceMarkers:5,maxTargetMarkers:5,customMode:!1,newU5:!1,endpoint:"brandenburg",normalizeLatLng:normalizeLatLng,getColorRangeArray:getColorRangeArray,reverseGeocode:reverseGeocode,geocode:geocode,getTravelOptions:getTravelOptions,getPolygons:getPolygons,getRoutes:getRoutes,addMarker:addMarker,parseGetParams:parseGetParams,updateURL:updateURL},prefs={home:{latlng:[52.5167,13.3833]},endpoints:{oldU5:"https://service.route360.net/brandenburg/",newU5:"https://service.route360.net/u5/"},travelTypes:[{name:"Bike",icon:"md:bike",value:"bike"},{name:"Walk",icon:"md:walk",value:"walk"},{name:"Car",icon:"md:car",value:"car"},{name:"Transit",icon:"md:train",value:"transit"}],queryTimeRange:{hour:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],minute:[0,5,10,15,20,25,30,35,40,45,50,55]},mapProviderList:[{name:"OpenStreetMaps",value:"osm"},{name:"Google Maps",value:"google"}],intersectionTypes:[{name:"Union",value:"union"},{name:"Intersection",value:"intersection"},{name:"Average",value:"average"}],travelTimeRanges:[{name:"5 Min - 30 Min",id:"5to30",times:[5,10,15,20,25,30]},{name:"10 Min - 60 Min",id:"10to60",times:[10,20,30,40,50,60]},{name:"20 Min - 120 Min",id:"20to120",times:[20,40,60,80,100,120]}],colorRanges:[{name:"Green to Red",id:"default",colors:["#006837","#39B54A","#8CC63F","#F7931E","#F15A24","#C1272D"],opacities:[1,1,1,1,1,1]},{name:"Colorblind",id:"colorblind",colors:["#142b66","#4525AB","#9527BC","#CE29A8","#DF2A5C","#F0572C"],opacities:[1,1,1,1,1,1]},{name:"Greyscale",id:"greyscale",colors:["#d2d2d2","#b2b2b2","#999999","#777777","#555555","#333333"],opacities:[1,.8,.6,.4,.2,0]},{name:"Inverse Mode (B/W)",id:"inverse",colors:["#777777"],opacities:[1,1,1,1,1,1]}],mapStyles:[{name:"Light",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png"},{name:"Dark",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png"},{name:"OSM Standard",value:"http://tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png"}]};r360.config.defaultPolygonLayerOptions.backgroundOpacity=.3,r360.config.requestTimeout=1e4,r360.config.serviceUrl="https://service.route360.net/"*self.endpoint,r360.config.serviceKey=self.serviceKey,r360.config.i18n.language="de";var layerGroups,lastRelatedTarget;return self}]);