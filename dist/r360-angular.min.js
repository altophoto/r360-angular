"use strict";angular.module("ng360",[]).factory("R360Angular",["$q","$location","$timeout","$http",function($q,$location,$timeout,$http){var R360Angular=function(){function R360Angular(map,options){this.options=scope.options,scope.map=map;if(angular.isDefined(options))for(var i in options)scope.options[i]=options[i];r360.config.defaultPolygonLayerOptions.backgroundOpacity=.3,r360.config.requestTimeout=1e4,r360.config.serviceUrl=scope.options.serviceUrl,r360.config.serviceKey=scope.options.serviceKey,r360.config.i18n.language="de",this.setServiceUrl=function(serviceUrl){r360.config.serviceUrl=serviceUrl},scope.lastRelatedTarget=this.lastRelatedTarget=null,scope.attribution="<a href='https://cartodb.com/' target='_blank'>© CartoDB</a> | <a href='https://www.openstreetmaps.com/' target='_blank'>© OpenStreetMap</a> | © Transit Data <a href='https://ruter.no' target='_blank'>Ruter</a>, <a href='https://www.kolumbus.no/en/' target='_blank'>Kolumbus</a> | developed by <a href='https://www.route360.net/?lang=en' target='_blank'>Motion Intelligence</a>",scope.layerGroups={tileLayer:L.tileLayer(scope.options.mapstyle,{maxZoom:18,attribution:scope.attribution}).addTo(map),markerLayerGroup:L.featureGroup().addTo(map),routeLayerGroup:L.featureGroup().addTo(map),polygonLayerGroup:r360.leafletPolygonLayer({extendWidthX:scope.options.extendWidth,extendWidthY:scope.options.extendWidth}).addTo(map),populationDensityLayer:L.tileLayer.wms("https://service.route360.net/geoserver/wms?service=WMS&TILED=true",{layers:"bevoelkerungsdichte_berlin_brandenburg:brandenburg_pop_density",format:"image/png",transparent:!0,opacity:.7})},map.on("contextmenu.show",function(e){this.lastRelatedTarget=e.relatedTarget})}function getTravelOptions(){var travelOptions=r360.travelOptions(),travelTime=60*scope.options.travelTime,travelTimes=[],defaultColors=[];if(scope.prefs.travelTimeRanges[scope.options.travelTimeRange].times.forEach(function(elem,index,array){var dataSet={};dataSet.time=60*elem,dataSet.color=scope.prefs.colorRanges[scope.options.colorRange].colors[index],dataSet.opacity=scope.prefs.colorRanges[scope.options.colorRange].opacities[index],defaultColors.push(dataSet)}),r360.config.defaultTravelTimeControlOptions.travelTimes=defaultColors,"inverse"==scope.options.colorRange?travelTimes.push(travelTime):defaultColors.forEach(function(elem,index,array){elem.time<=travelTime&&travelTimes.push(elem.time)}),travelOptions.setTravelTimes(travelTimes),travelOptions.setTravelType(scope.options.travelType),scope.options.markers.forEach(function(marker){marker.polygons&&"source"==marker.route&&travelOptions.addSource(marker),"target"==marker.route&&travelOptions.addTarget(marker)}),travelOptions.extendWidthX=2*scope.options.extendWidth,travelOptions.extendWidthY=2*scope.options.extendWidth,travelOptions.setIntersectionMode(scope.options.intersection),"transit"==scope.options.travelType){var date=String(scope.options.queryDate.getFullYear())+("0"+String(scope.options.queryDate.getMonth()+1)).slice(-2)+("0"+String(scope.options.queryDate.getDate())).slice(-2);travelOptions.setDate(date);var rawTime=scope.options.queryTime,time=3600*rawTime.h+60*rawTime.m;travelOptions.setTime(time)}return travelOptions.setMinPolygonHoleSize(3600*scope.options.travelTime*2e3),travelOptions}function buildPlaceDescription(rawResult){var name,adress1,adress2,result={title:"",meta1:"",meta2:"",full:""};return angular.isDefined(rawResult.name)&&(name=rawResult.name),angular.isDefined(rawResult.street)&&(adress1=rawResult.street,angular.isDefined(rawResult.housenumber)&&(adress1+=" "+rawResult.housenumber)),angular.isDefined(rawResult.city)?(adress2=rawResult.city,angular.isDefined(rawResult.postcode)&&(adress2=rawResult.postcode+" "+adress2),angular.isDefined(rawResult.country)&&(adress2+=", "+rawResult.country)):angular.isDefined(rawResult.country)&&(adress2=rawResult.country),angular.isDefined(name)?(result.title=name,result.meta1=adress1,result.meta2=adress2):(result.title=adress1,result.meta1=adress2),name!==adress1&&(result.full=result.title),""!==result.meta1&&angular.isDefined(result.meta1)&&name!==adress1&&(result.full+=", "+result.meta1),""!==result.meta1&&angular.isDefined(result.meta1)&&name==adress1&&(result.full+=result.meta1),""!==result.meta2&&angular.isDefined(result.meta2)&&(result.full+=", "+result.meta2),result}var now=new Date,hour=now.getHours(),minute=(now.getMinutes()+(5-now.getMinutes()%5))%60;0===minute&&hour++,24===hour&&(hour=0);var scope={};return scope.prefs={travelTypes:[{name:"Bike",icon:"md:bike",value:"bike"},{name:"Walk",icon:"md:walk",value:"walk"},{name:"Car",icon:"md:car",value:"car"},{name:"Transit",icon:"md:train",value:"transit"}],queryTimeRange:{hour:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],minute:[0,5,10,15,20,25,30,35,40,45,50,55]},mapProviderList:[{name:"OpenStreetMaps",value:"osm"},{name:"Google Maps",value:"google"}],intersectionTypes:[{name:"Union",value:"union"},{name:"Intersection",value:"intersection"},{name:"Average",value:"average"}],travelTimeRanges:{"5to30":{name:"5 Min - 30 Min",id:"5to30",times:[5,10,15,20,25,30]},"10to60":{name:"10 Min - 60 Min",id:"10to60",times:[10,20,30,40,50,60]},"20to120":{name:"20 Min - 120 Min",id:"20to120",times:[20,40,60,80,100,120]}},colorRanges:{"default":{name:"Green to Red",id:"default",colors:["#006837","#39B54A","#8CC63F","#F7931E","#F15A24","#C1272D"],opacities:[1,1,1,1,1,1]},colorblind:{name:"Colorblind",id:"colorblind",colors:["#142b66","#4525AB","#9527BC","#CE29A8","#DF2A5C","#F0572C"],opacities:[1,1,1,1,1,1]},greyscale:{name:"Greyscale",id:"greyscale",colors:["#d2d2d2","#b2b2b2","#999999","#777777","#555555","#333333"],opacities:[1,.8,.6,.4,.2,0]},inverse:{name:"Inverse Mode (B/W)",id:"inverse",colors:["#777777"],opacities:[1,1,1,1,1,1]}},mapStyles:[{name:"Light",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png"},{name:"Dark",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png"},{name:"OSM Standard",value:"http://tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png"}]},scope.options={},scope.options.serviceKey="6RNT8QMSOBQN0KMFXIPD",scope.options.areaID="germany",scope.options.travelTime=30,scope.options.travelTimeRange="5to30",scope.options.travelType="transit",scope.options.queryTime={h:hour,m:minute},scope.options.queryDate=now,scope.options.colorRange="default",scope.options.markers=[],scope.options.intersection="union",scope.options.strokeWidth=20,scope.options.extendWidth=500,scope.options.mapstyle="https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",scope.options.showmarkers=!0,scope.options.showTargetMarkers=!1,scope.options.showSourceIsochrones=!1,scope.options.showTargetIsochrones=!1,scope.options.singleMarkerMode=!0,scope.options.maxmarkers=5,scope.options.maxTargetMarkers=5,scope.options.customMode=!1,scope.options.newU5=!1,scope.options.endpoint="brandenburg",scope.options.serviceUrl="https://service.route360.net/brandenburg/",scope.options.showPopLayer=!1,R360Angular.prototype.getColorRangeArray=function(){return scope.prefs.colorRanges[scope.options.colorRange]},R360Angular.prototype.normalizeLatLng=function(coords){var result={lat:void 0,lng:void 0};return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(result.lat=parseFloat(coords.lat.toFixed(6)),result.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(result.lat=parseFloat(coords[0].toFixed(6)),result.lng=parseFloat(coords[1].toFixed(6))),coords},R360Angular.prototype.togglePopLayer=function(regions){scope.options.showPopLayer?(scope.options.showPopLayer=!1,scope.map.removeLayer(scope.layerGroups.populationDensityLayer)):(scope.options.showPopLayer=!0,angular.isDefined(regions)&&scope.layerGroups.populationDensityLayer.setParams({layers:regions}),scope.layerGroups.populationDensityLayer.addTo(scope.map))},R360Angular.prototype.geocode=function(query,coords){var results=[],deferred=$q.defer();return $http({method:"GET",url:"https://service.route360.net/geocode/api/?q="+query+"&lat="+coords.lat+"&lon="+coords.lng+"&limit=5"}).then(function(response){results=response.data.features.map(function(result){return result.value=result.properties.osm_id,result.description=buildPlaceDescription(result.properties),console.log(result.description),result}),deferred.resolve(results)},function(response){console.log(response)}),deferred.promise},R360Angular.prototype.reverseGeocode=function(coords){var url="",deferred=$q.defer();return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(url="https://service.route360.net/geocode/reverse?lon="+coords.lng+"&lat="+coords.lat),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(url="https://service.route360.net/geocode/reverse?lon="+coords[1]+"&lat="+coords[0]),$http({method:"GET",url:url}).then(function(response){var properties={};response.data.features.length>0?(properties=response.data.features[0].properties,"undefined"==typeof properties.name&&(properties.name="","undefined"!=typeof properties.street&&(properties.name+=properties.street),"undefined"!=typeof properties.housenumber&&(properties.name+=" "+properties.housenumber))):properties={name:"Marker",city:"",country:""},deferred.resolve(properties)},function(response){console.log(response)}),deferred.promise},R360Angular.prototype.getPolygons=function(success,error){if(angular.isDefined(scope.layerGroups)){0===scope.options.markers.length&&(scope.layerGroups.polygonLayerGroup.clearLayers(),angular.isDefined(success)&&success("normarkers"));var method=scope.options.markers.length>5?"POST":"GET";"inverse"==scope.options.colorRange?scope.layerGroups.polygonLayerGroup.setInverse(!0):scope.layerGroups.polygonLayerGroup.setInverse(!1);var travelOptions=getTravelOptions();return travelOptions.getSources().length<1?(scope.layerGroups.polygonLayerGroup.clearLayers(),void(angular.isDefined(success)&&success("normarkers"))):void $timeout(function(){r360.PolygonService.getTravelTimePolygons(travelOptions,function(polygons){scope.layerGroups.polygonLayerGroup.clearAndAddLayers(polygons,!1),angular.isDefined(success)&&success()},function(status,message){angular.isDefined(error)&&error(status,message)},method)})}},R360Angular.prototype.getRoutes=function(success,error){if(angular.isDefined(scope.layerGroups)){if(scope.layerGroups.routeLayerGroup.clearLayers(),0===scope.options.markers.length)return void(angular.isDefined(success)&&success("normarkers"));var travelOptions=getTravelOptions();$timeout(function(){r360.RouteService.getRoutes(travelOptions,function(routes){routes.forEach(function(elem,index,array){r360.LeafletUtil.fadeIn(scope.layerGroups.routeLayerGroup,elem,500,"travelDistance",{color:"red",haloColor:"#fff"})}),angular.isDefined(success)&&success("normarkers")},function(status,message){angular.isDefined(error)&&error(status,message)})})}},R360Angular.prototype.parseGetParams=function($routeParams){for(var index in $routeParams){var value=$routeParams[index];switch(index){case"cityID":case"travelTime":case"travelTimeRange":case"colorRange":case"mapProvider":case"maxmarkers":case"maxTargetMarkers":scope.options[index]=parseInt(value);break;case"areaID":case"travelType":case"intersection":scope.options[index]=value;break;case"sources":case"targets":break;default:console.log("Parameter not valid")}}if(angular.isDefined(scope.options.cityID)&&"number"==typeof scope.options.cityID)switch(scope.options.cityID){case 0:scope.options.areaID="berlin";break;case 1:scope.options.areaID="norway";break;case 2:scope.options.areaID="france";break;case 3:scope.options.areaID="canada";break;case 4:scope.options.areaID="denmark";break;case 5:scope.options.areaID="britishisles";break;case 6:scope.options.areaID="switzerland";break;case 7:scope.options.areaID="austria";break;case 8:scope.options.areaID="newyork"}},R360Angular.prototype.updateURL=function($routeParams){for(var index in scope.options.options)switch(index){case"markers":if(0===scope.options.markers.length){$location.search("sources",null);break}var sources=[];scope.options.markers.forEach(function(elem,index,array){sources.push(elem._latlng.lat+","+elem._latlng.lng)}),$location.search("sources",sources.join(";"));break;case"areaID":case"travelTime":case"travelTimeRange":case"travelType":case"colorRange":case"intersection":if(angular.isDefined($routeParams[index])&&$routeParams[index]==scope.options[index])break;$location.search(index,String(scope.options[index]))}},R360Angular.prototype.addMarker=function(coords,polygons,route,leafletMarkerOptions){angular.isDefined(route)||(route="source"),angular.isDefined(polygons)||(polygons="true");var markerOptions={icon:L.AwesomeMarkers.icon({icon:"fa-circle",prefix:"fa",markerColor:"red"}),contextmenu:!0,draggable:!0,contextmenuItems:[{text:"Delete Marker",callback:this.removeMarkerFromContext,index:3,iconFa:"fa-fw fa-times"},{separator:!0,index:2}]};if(angular.isDefined(leafletMarkerOptions))for(var key in leafletMarkerOptions)markerOptions[key]=leafletMarkerOptions[key];if("undefined"==typeof coords[0]&&"undefined"==typeof coords[1]||"undefined"==typeof coords.lat&&"undefined"==typeof coords.lng){"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(coords.lat=parseFloat(coords.lat.toFixed(6)),coords.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(coords[0]=parseFloat(coords[0].toFixed(6)),coords[1]=parseFloat(coords[1].toFixed(6)));var newMarker=(scope.layerGroups.markerLayerGroup,L.marker(coords,markerOptions));return newMarker.polygons=polygons,newMarker.route=route,newMarker.addTo(scope.layerGroups.markerLayerGroup),scope.options.markers.push(newMarker),newMarker}},R360Angular.prototype.removeMarker=function(marker){scope.layerGroups.markerLayerGroup.removeLayer(marker),scope.options.markers.forEach(function(elem,index,array){elem==marker&&array.splice(index,1)})},R360Angular}();return R360Angular}]);