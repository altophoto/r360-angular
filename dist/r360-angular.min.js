"use strict";angular.module("ng360",[]),angular.module("ng360").factory("R360Angular",["$q","$location","$timeout","$http",function($q,$location,$timeout,$http){var R360Angular=function(){function R360Angular(map,options){scope.map=map;var self=this;if(self.options={},self.options.serviceKey="6RNT8QMSOBQN0KMFXIPD",self.options.areaID="germany",self.options.travelTime=30,self.options.travelTimeRange="5to30",self.options.travelType="transit",self.options.queryTime={h:hour,m:minute},self.options.queryDate=now,self.options.colorRange="default",self.options.markers=[],self.options.intersection="union",self.options.strokeWidth=20,self.options.extendWidth=500,self.options.mapstyle="https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",self.options.maxmarkers=5,self.options.maxTargetMarkers=5,self.options.customMode=!1,self.options.endpoint="brandenburg",self.options.serviceUrl="https://service.route360.net/brandenburg/",self.options.populationServiceUrl="https://service.route360.net/brandenburg_population/population/",self.options.showPopLayer=!1,angular.isDefined(options))for(var i in options)self.options[i]=options[i];r360.config.defaultPolygonLayerOptions.backgroundOpacity=.3,r360.config.requestTimeout=1e4,r360.config.serviceUrl=self.options.serviceUrl,r360.config.serviceKey=self.options.serviceKey,r360.config.i18n.language="de",this.setServiceUrl=function(serviceUrl){r360.config.serviceUrl=serviceUrl},this.lastRelatedTarget=null,this.attribution="<a href='https://cartodb.com/' target='_blank'>© CartoDB</a> | <a href='https://www.openstreetmaps.com/' target='_blank'>© OpenStreetMap</a> | © Transit Data <a href='https://ruter.no' target='_blank'>Ruter</a>, <a href='https://www.kolumbus.no/en/' target='_blank'>Kolumbus</a> | developed by <a href='https://www.route360.net/?lang=en' target='_blank'>Motion Intelligence</a>",this.layerGroups={tileLayer:L.tileLayer(self.options.mapstyle,{maxZoom:18,attribution:this.attribution}).addTo(map),markerLayerGroup:L.featureGroup().addTo(map),routeLayerGroup:L.featureGroup().addTo(map),polygonLayerGroup:r360.leafletPolygonLayer({extendWidthX:self.options.extendWidth,extendWidthY:self.options.extendWidth}).addTo(map),populationDensityLayer:L.tileLayer.wms("https://service.route360.net/geoserver/wms?service=WMS&TILED=true",{layers:"bevoelkerungsdichte_berlin_brandenburg:brandenburg_pop_density",format:"image/png",transparent:!0,opacity:.5})},map.on("contextmenu.show",function(e){this.lastRelatedTarget=e.relatedTarget})}var now=new Date,hour=now.getHours(),minute=(now.getMinutes()+(5-now.getMinutes()%5))%60;0===minute&&hour++,24===hour&&(hour=0);var scope={};return scope.prefs={travelTypes:[{name:"Bike",icon:"md:bike",value:"bike"},{name:"Walk",icon:"md:walk",value:"walk"},{name:"Car",icon:"md:car",value:"car"},{name:"Transit",icon:"md:train",value:"transit"}],queryTimeRange:{hour:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],minute:[0,5,10,15,20,25,30,35,40,45,50,55]},mapProviderList:[{name:"OpenStreetMaps",value:"osm"},{name:"Google Maps",value:"google"}],intersectionTypes:[{name:"Union",value:"union"},{name:"Intersection",value:"intersection"},{name:"Average",value:"average"}],travelTimeRanges:{"5to30":{name:"5 Min - 30 Min",id:"5to30",times:[5,10,15,20,25,30]},"10to60":{name:"10 Min - 60 Min",id:"10to60",times:[10,20,30,40,50,60]},"20to120":{name:"20 Min - 120 Min",id:"20to120",times:[20,40,60,80,100,120]}},colorRanges:{"default":{name:"Green to Red",id:"default",colors:["#006837","#39B54A","#8CC63F","#F7931E","#F15A24","#C1272D"],opacities:[1,1,1,1,1,1]},colorblind:{name:"Colorblind",id:"colorblind",colors:["#142b66","#4525AB","#9527BC","#CE29A8","#DF2A5C","#F0572C"],opacities:[1,1,1,1,1,1]},greyscale:{name:"Greyscale",id:"greyscale",colors:["#d2d2d2","#b2b2b2","#999999","#777777","#555555","#333333"],opacities:[1,.8,.6,.4,.2,0]},inverse:{name:"Inverse Mode (B/W)",id:"inverse",colors:["#777777"],opacities:[1,1,1,1,1,1]}},mapStyles:[{name:"Light",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png"},{name:"Dark",value:"https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png"},{name:"OSM Standard",value:"http://tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png"}]},R360Angular.prototype.getTravelOptions=function(){var self=this,travelOptions=r360.travelOptions(),travelTime=60*self.options.travelTime,travelTimes=[],defaultColors=[];if(scope.prefs.travelTimeRanges[self.options.travelTimeRange].times.forEach(function(elem,index,array){var dataSet={};dataSet.time=60*elem,dataSet.color=scope.prefs.colorRanges[self.options.colorRange].colors[index],dataSet.opacity=scope.prefs.colorRanges[self.options.colorRange].opacities[index],defaultColors.push(dataSet)}),r360.config.defaultTravelTimeControlOptions.travelTimes=defaultColors,"inverse"==self.options.colorRange?travelTimes.push(travelTime):defaultColors.forEach(function(elem,index,array){elem.time<=travelTime&&travelTimes.push(elem.time)}),"inverse"==self.options.colorRange?self.layerGroups.polygonLayerGroup.setInverse(!0):self.layerGroups.polygonLayerGroup.setInverse(!1),travelOptions.setTravelTimes(travelTimes),travelOptions.setTravelType(self.options.travelType),self.options.markers.forEach(function(marker){marker.polygons&&"source"==marker.route&&travelOptions.addSource(marker),"target"==marker.route&&travelOptions.addTarget(marker)}),travelOptions.extendWidthX=2*self.options.extendWidth,travelOptions.extendWidthY=2*self.options.extendWidth,travelOptions.setIntersectionMode(self.options.intersection),"transit"==self.options.travelType){var date=String(self.options.queryDate.getFullYear())+("0"+String(self.options.queryDate.getMonth()+1)).slice(-2)+("0"+String(self.options.queryDate.getDate())).slice(-2);travelOptions.setDate(date);var rawTime=self.options.queryTime,time=3600*rawTime.h+60*rawTime.m;travelOptions.setTime(time)}return travelOptions.setMinPolygonHoleSize(3600*self.options.travelTime*2e3),travelOptions},R360Angular.prototype.getColorRangeArray=function(){var self=this;return scope.prefs.colorRanges[self.options.colorRange]},R360Angular.prototype.getTravelTimeRangeArray=function(){var self=this;return scope.prefs.travelTimeRanges[self.options.travelTimeRange]},R360Angular.prototype.togglePopLayer=function(regions){var self=this;self.options.showPopLayer?(self.options.showPopLayer=!1,scope.map.removeLayer(self.layerGroups.populationDensityLayer),self.options.colorRange="default"):(self.options.showPopLayer=!0,angular.isDefined(regions)&&self.layerGroups.populationDensityLayer.setParams({layers:regions}),self.layerGroups.populationDensityLayer.addTo(scope.map),self.options.colorRange="inverse")},R360Angular.prototype.getPopData=function(success,customPopulationServiceUrl){var self=this,populationServiceUrl=angular.isDefined(customPopulationServiceUrl)?customPopulationServiceUrl:self.options.populationServiceUrl,url=populationServiceUrl+"?key="+self.options.serviceKey+"&travelType="+self.options.travelType+"&maxRoutingTime="+60*self.options.travelTime+"&statistics=population_total",payload=[];return self.options.markers.forEach(function(marker){marker.polygons&&"source"==marker.route&&payload.push({lat:marker._latlng.lat,lng:marker._latlng.lng,id:marker._latlng.lat+";"+marker._latlng.lng})}),payload.length<1?void success("nomarkers"):void $http({method:"post",url:url,data:payload,contentType:"application/json",cache:!0}).success(function(result,status,headers,config){var rawData,resultData={nvd3Data:[{key:"Population",values:[]}],max:0};rawData=result[0].values;var sum=0;rawData.forEach(function(dataset,index){index>self.options.travelTime||(sum+=dataset,resultData.nvd3Data[0].values.push({label:0==index?"<1":index,value:sum}),resultData.max=sum)}),angular.isDefined(success)&&success(resultData)}).error(function(data,status,headers,config){console.log(data),console.log(status),console.log(headers),console.log(config)})},R360Angular.prototype.getPolygons=function(success,error){var self=this;if(angular.isDefined(self.layerGroups)){0===self.options.markers.length&&(self.layerGroups.polygonLayerGroup.clearLayers(),angular.isDefined(success)&&success("normarkers"));var method=self.options.markers.length>5?"POST":"GET";"inverse"==self.options.colorRange?self.layerGroups.polygonLayerGroup.setInverse(!0):self.layerGroups.polygonLayerGroup.setInverse(!1);var travelOptions=self.getTravelOptions();return travelOptions.getSources().length<1?(self.layerGroups.polygonLayerGroup.clearLayers(),void(angular.isDefined(success)&&success("normarkers"))):void $timeout(function(){r360.PolygonService.getTravelTimePolygons(travelOptions,function(polygons){self.layerGroups.polygonLayerGroup.clearAndAddLayers(polygons,!1),angular.isDefined(success)&&success()},function(status,message){angular.isDefined(error)&&error(status,message)},method)})}},R360Angular.prototype.getRoutes=function(success,error){var self=this;if(angular.isDefined(self.layerGroups)){if(self.layerGroups.routeLayerGroup.clearLayers(),0===self.options.markers.length)return void(angular.isDefined(success)&&success("normarkers"));var travelOptions=self.getTravelOptions();$timeout(function(){r360.RouteService.getRoutes(travelOptions,function(routes){routes.forEach(function(elem,index,array){r360.LeafletUtil.fadeIn(self.layerGroups.routeLayerGroup,elem,500,"travelDistance",{color:"red",haloColor:"#fff"})}),angular.isDefined(success)&&success("normarkers")},function(status,message){angular.isDefined(error)&&error(status,message)})})}},R360Angular.prototype.parseGetParams=function($routeParams){var self=this;for(var index in $routeParams){var value=$routeParams[index];switch(index){case"cityID":case"travelTime":case"travelTimeRange":case"colorRange":case"mapProvider":case"maxmarkers":case"maxTargetMarkers":self.options[index]=parseInt(value);break;case"areaID":case"travelType":case"intersection":self.options[index]=value;break;case"sources":case"targets":break;default:console.log("Parameter not valid")}}if(angular.isDefined(self.options.cityID)&&"number"==typeof self.options.cityID)switch(self.options.cityID){case 0:self.options.areaID="berlin";break;case 1:self.options.areaID="norway";break;case 2:self.options.areaID="france";break;case 3:self.options.areaID="canada";break;case 4:self.options.areaID="denmark";break;case 5:self.options.areaID="britishisles";break;case 6:self.options.areaID="switzerland";break;case 7:self.options.areaID="austria";break;case 8:self.options.areaID="newyork"}},R360Angular.prototype.updateURL=function($routeParams){var self=this;for(var index in self.options.options)switch(index){case"markers":if(0===self.options.markers.length){$location.search("sources",null);break}var sources=[];self.options.markers.forEach(function(elem,index,array){sources.push(elem._latlng.lat+","+elem._latlng.lng)}),$location.search("sources",sources.join(";"));break;case"areaID":case"travelTime":case"travelTimeRange":case"travelType":case"colorRange":case"intersection":if(angular.isDefined($routeParams[index])&&$routeParams[index]==self.options[index])break;$location.search(index,String(self.options[index]))}},R360Angular.prototype.addMarker=function(coords,polygons,route,leafletMarkerOptions){var self=this;angular.isDefined(route)||(route="source"),angular.isDefined(polygons)||(polygons="true");var markerOptions={icon:L.AwesomeMarkers.icon({icon:"fa-circle",prefix:"fa",markerColor:"red"}),contextmenu:!0,draggable:!0,contextmenuItems:[{text:"Delete Marker",callback:this.removeMarkerFromContext,index:3,iconFa:"fa-fw fa-times"},{separator:!0,index:2}]};if(angular.isDefined(leafletMarkerOptions))for(var key in leafletMarkerOptions)markerOptions[key]=leafletMarkerOptions[key];if("undefined"==typeof coords[0]&&"undefined"==typeof coords[1]||"undefined"==typeof coords.lat&&"undefined"==typeof coords.lng){"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(coords.lat=parseFloat(coords.lat.toFixed(6)),coords.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(coords[0]=parseFloat(coords[0].toFixed(6)),coords[1]=parseFloat(coords[1].toFixed(6)));var newMarker=(self.layerGroups.markerLayerGroup,L.marker(coords,markerOptions));return newMarker.polygons=polygons,newMarker.route=route,newMarker.addTo(self.layerGroups.markerLayerGroup),self.options.markers.push(newMarker),newMarker}},R360Angular.prototype.removeMarker=function(marker){var self=this;self.layerGroups.markerLayerGroup.removeLayer(marker),self.options.markers.forEach(function(elem,index,array){elem==marker&&array.splice(index,1)})},R360Angular}();return R360Angular}]),angular.module("ng360").controller("GeocoderCtrl",["$scope","$timeout","$attrs","R360Util",function($scope,$timeout,$attrs,R360Util){function selectedItemChange(item){angular.isDefined($scope.placeChanged)&&angular.isDefined(item)&&$scope.placeChanged({item:item})}var vm=this;vm.selectedItem=null,vm.searchText=null,vm.geocode=R360Util.geocode,vm.selectedItemChange=selectedItemChange}]),angular.module("ng360").directive("r360Geocoder",function(){return{restrict:"E",templateUrl:"geocoder.tpl",controller:"GeocoderCtrl",controllerAs:"geocoderCtrl",scope:{bias:"=",selectedPlace:"=",placeChanged:"&"}}}),angular.module("ng360").run(function($templateCache){var tpl="<form flex ng-submit='$event.preventDefault()'>          <md-autocomplete flex              md-selected-item='geocoderCtrl.selectedItem'              md-search-text='geocoderCtrl.searchText'              md-selected-item-change='geocoderCtrl.selectedItemChange(item)'              md-items='item in geocoderCtrl.geocode(geocoderCtrl.searchText)'              md-item-text='item.description.full'              md-min-length='3'              placeholder='Add marker...'              md-menu-class='r360-autocomplete'>            <md-item-template>            <span class='item-title'>                <span><strong>{{item.description.title}}</strong></span>              </span>              <span class='item-metadata'>                <span class='item-metastat'>                  {{item.description.meta1}}                </span>                <span class='item-metastat'>                  {{item.description.meta2}}                </span>              </span>            </md-item-template>            <md-not-found>              No matches found for '{{geocoderCtrl.searchText}}'.            </md-not-found>          </md-autocomplete>        </form>";$templateCache.put("geocoder.tpl",tpl)}),angular.module("ng360").directive("r360Rainbow",function(){return{restrict:"E",templateUrl:"rainbow.tpl",scope:{travelTime:"=",travelTimeRange:"=",colorRange:"="}}}),angular.module("ng360").run(function($templateCache){var tpl="<md-whiteframe class='md-whiteframe-z2' flex layout layout-align='center center'>          <label ng-repeat='tt in travelTimeRange.times' ng-if='travelTime >= tt && colorRange.colors.length > 1' flex style='background: {{colorRange.colors[$index]}}'>            {{tt}} Min          </label>          <label ng-if='colorRange.colors.length == 1' flex style='background: {{colorRange.colors[0]}}'>            {{travelTime}} Min          </label>        </md-whiteframe>";$templateCache.put("rainbow.tpl",tpl)}),angular.module("ng360").controller("TsChartCtrl",["$scope","$timeout","$attrs",function($scope,$timeout,$attrs){var vm=this;vm.chartApi={},console.log($attrs),console.log($scope),$timeout(function(){console.log($attrs),console.log($scope)},1e3),$scope.$watch("chartData",function(value){console.log("chartdata has changed value to"),console.log(value),angular.isDefined($scope.chartData)&&(angular.isDefined($scope.chartData.nvd3Data)&&(vm.data=$scope.chartData.nvd3Data),angular.isDefined($scope.chartData.max)&&(vm.max=$scope.chartData.max))}),vm.showChart=function(){vm.data[0].values.length>0?!0:!1},vm.max,vm.data=[{key:"Population",values:[]}],vm.options={chart:{type:"discreteBarChart",height:300,margin:{top:30,right:30,bottom:50,left:70},x:function(d){return d.label},y:function(d){return d.value},showValues:!1,valueFormat:d3.format(".0f"),duration:500,xAxis:{axisLabel:"Time in min",tickFormat:function(d,i){return d%5==0?d:void 0}},color:function(d,i){return"inverse"==$scope.colorRange.id?$scope.colorRange.colors[0]:i<=$scope.traveltimeRange.times[0]?$scope.colorRange.colors[0]:i<=$scope.traveltimeRange.times[1]&&i>$scope.traveltimeRange.times[0]?$scope.colorRange.colors[1]:i<=$scope.traveltimeRange.times[2]&&i>$scope.traveltimeRange.times[1]?$scope.colorRange.colors[2]:i<=$scope.traveltimeRange.times[3]&&i>$scope.traveltimeRange.times[2]?$scope.colorRange.colors[3]:i<=$scope.traveltimeRange.times[4]&&i>$scope.traveltimeRange.times[3]?$scope.colorRange.colors[4]:i<=$scope.traveltimeRange.times[5]&&i>$scope.traveltimeRange.times[4]?$scope.colorRange.colors[5]:void 0},yAxis:{axisLabel:"Reachable people",tickFormat:d3.format("s")}}}}]),angular.module("ng360").directive("timeServiceChart",function(){return{restrict:"E",scope:{chartData:"=",colorRange:"=",traveltimeRange:"="},templateUrl:"timeServiceChart.tpl",controllerAs:"tsChartCtrl",controller:"TsChartCtrl"}}),angular.module("ng360").run(function($templateCache){var tpl="<nvd3 ng-if='tsChartCtrl.data[0].values.length > 0' flex options='tsChartCtrl.options' data='tsChartCtrl.data' api='tsChartCtrl.chartApi'></nvd3>          <md-list-item ng-if='tsChartCtrl.data[0].values.length == 0'>              <p>No population chart to show.</p>          </md-list-item>          <md-list-item ng-if='tsChartCtrl.max'>              <p>Total reachable</p>              <p style='text-align: right'>{{tsChartCtrl.max | number:0}}</p>          </md-list-item>";$templateCache.put("timeServiceChart.tpl",tpl)}),angular.module("ng360").factory("R360Util",["$q","$location","$timeout","$http",function($q,$location,$timeout,$http){function buildPlaceDescription(rawResult){var name,adress1,adress2,result={title:"",meta1:"",meta2:"",full:""};return angular.isDefined(rawResult.name)&&(name=rawResult.name),angular.isDefined(rawResult.street)&&(adress1=rawResult.street,angular.isDefined(rawResult.housenumber)&&(adress1+=" "+rawResult.housenumber)),angular.isDefined(rawResult.city)?(adress2=rawResult.city,angular.isDefined(rawResult.postcode)&&(adress2=rawResult.postcode+" "+adress2),angular.isDefined(rawResult.country)&&(adress2+=", "+rawResult.country)):angular.isDefined(rawResult.country)&&(adress2=rawResult.country),angular.isDefined(name)?(result.title=name,result.meta1=adress1,result.meta2=adress2):(result.title=adress1,result.meta1=adress2),name!==adress1&&(result.full=result.title),""!==result.meta1&&angular.isDefined(result.meta1)&&name!==adress1&&(result.full+=", "+result.meta1),""!==result.meta1&&angular.isDefined(result.meta1)&&name==adress1&&(result.full+=result.meta1),""!==result.meta2&&angular.isDefined(result.meta2)&&(result.full+=", "+result.meta2),result}function normalizeLatLng(coords){var result={lat:void 0,lng:void 0};return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(result.lat=parseFloat(coords.lat.toFixed(6)),result.lng=parseFloat(coords.lng.toFixed(6))),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(result.lat=parseFloat(coords[0].toFixed(6)),result.lng=parseFloat(coords[1].toFixed(6))),coords}function geocode(query,coords){var results=[],deferred=$q.defer(),url="https://service.route360.net/geocode/api/?q="+query+"&limit=5";return angular.isDefined(coords)&&(url+="&lat="+coords.lat+"&lon="+coords.lng),$http({method:"GET",url:url}).then(function(response){response.data.features.forEach(function(feature,index,array){"boundary"==feature.properties.osm_key&&array.splice(index,1)}),results=response.data.features.map(function(result){return result.value=result.properties.osm_id,result.description=buildPlaceDescription(result.properties),result}),deferred.resolve(results)},function(response){console.log(response)}),deferred.promise}function reverseGeocode(coords){var url="",deferred=$q.defer();return"undefined"!=typeof coords.lat&&"undefined"!=typeof coords.lng&&(url="https://service.route360.net/geocode/reverse?lon="+coords.lng+"&lat="+coords.lat),"undefined"!=typeof coords[0]&&"undefined"!=typeof coords[1]&&(url="https://service.route360.net/geocode/reverse?lon="+coords[1]+"&lat="+coords[0]),$http({method:"GET",url:url}).then(function(response){var properties={};response.data.features.length>0?(properties=response.data.features[0].properties,"undefined"==typeof properties.name&&(properties.name="","undefined"!=typeof properties.street&&(properties.name+=properties.street),"undefined"!=typeof properties.housenumber&&(properties.name+=" "+properties.housenumber))):properties={name:"Marker",city:"",country:""},deferred.resolve(properties)},function(response){console.log(response)}),deferred.promise}var R360Util={buildPlaceDescription:buildPlaceDescription,normalizeLatLng:normalizeLatLng,geocode:geocode,reverseGeocode:reverseGeocode};return R360Util}]);